alter session set week_start = 1;

CREATE or REPLACE table PLACHTA as 
select  lr."passengerId", lr."orderID"
, lr."driverId"
, d. driver_id
, ifnull (lr."pasToDrvRating", pd.avg_rate_pass_to_drv) as PASS2DRV_RATE  -- pokud není poslední jízda ohodnocena, bereme průmerné hodnocení pass
, pd.avg_rate_pass_to_drv as PASS2DRV_RATE_AVG
, PASS2DRV_RATE/PASS2DRV_RATE_AVG as PASS2DRV_RATE_DEV 
, lr."drvToPasRating" as DRV2PASS_RATE
, lr."taxiETA" as ETA, pd.avg_eta as pass_avg_eta
, ETA/pass_avg_eta as ETA_DEV
,lr."rideDistance", "rideEstimateDistance"
, lr.diff_distance
, (case 
   when lr."rideEstimateDistance" < 500 then 0
   when lr."rideEstimateDistance" > 500 and lr.diff_distance <= 1 then 0--predpokladame, ze pokud zaplati zakaznik stejne nebo min, tak kvuli tomu neodejde
   else round(lr.diff_distance/ lr."rideEstimateDistance")+1
   end) as DIFF_DISTANCE_RATE -- 0: pokud EstimateDistance < 500, 1: pokud odhadovana a skutecna vzdalenost byla 1:1, dale nasobky
,(case 
   when lr."rideEstimateDistance" < 500 then 1
   when lr."rideEstimateDistance" >= 500 then round(lr."rideEstimateDistance"/lr."rideDistance", 2)
   end) as DIFF_DISTANCE_EST2REAL--Podil odahdovane vzdalenosti ke skutecne; pokud odhad nebyl, tak 1
, (case 
   when lr."rideEstimateDistance" < 500 then 2 
   when lr.diff_distance < 0 then 0
   when lr.diff_distance >= 0 then 1
   end) as DIFF_DISTANCE_POSITIVE
, lr.total_distance
, pd.duration as pass_lifetime
/*, (case
   when pd.duration = 0 then lr.total_distance
   else round (lr.total_distance/pass_lifetime)
   end) as AVG_DAILY_DISTANCE -- prumerna denni vzdalenost pasazera (pozor, je zkreslena, pokud nejezdi casto)*/
, round(lr.total_distance/pd.num_rides) as AVG_RIDE_DISTANCE -- prumerna vzdalenost jedne jizdy pasazera (OK, nezkresluje, jako AVG_DAILY_DISTANCE)
, round(lr."rideDistance"/ AVG_RIDE_DISTANCE, 2) as LAST_RIDE_DISTANCE_DEV --podil vzdalenosti posledni jizdy pasazera ke vzdalenosti jeho prumerne jizdy
, pd.num_rides as pass_num_rides --,pd.num_orders as pass_num_orders
, pd."RIDE2ORDER" as pass_ride2order
, case when pd.duration = 0 then pd.num_rides
  else round (pd.num_rides / pd.duration,2)
  end as frequency
--, pd.last_ride_r as pass_last_ride
, case when to_time(pd.last_ride_r) between to_time ('06:00:00', 'HH24.MI.SS') and to_time ('22:00:00', 'HH24.MI.SS') then 1 -- daily 
  else 0 -- nightly
  end as daily_last_ride
, dayofweek(pd.last_ride_r) as DAY_OF_LAST_RIDE
, pd.active_pass, pd.home_region_id
, d.avg_rating as DRV_AVG_RATING
, DRV2PASS_RATE/DRV_AVG_RATING as DRV_AVG_RATE_DEV
, d.num_rides as drv_num_rides, d.kill_rate as drv_kill_rate
from last_rides lr
left join pass_datamart pd on pd."passengerId"=lr."passengerId"
left join drv d on d."driverId"= lr."driverId"
where pd.payer_type = '0'
and "rideDistance" >= 500;
