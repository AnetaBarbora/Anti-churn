------------------------------------------------------------------
--------TABULKA PASS ---------------------------------------------
------------------------------------------------------------------
-- pasazeri - ti co udělali alespon 3 jízdy ----------------------
-- a jejich uskutečněné jizdy-------------------------------------
-- bereme v potaz pouze jízdy do 3.2.2019 včetně------------------

create or replace table "PASS" as
select * from INQUIRY
where 1=1
and "passengerId" in (select distinct ("passengerId") from INQUIRY 
where "rideState" in ('FINISHED') 
and "rideFinishedAt_UTC" <= to_date ('3.2.2019', 'dd.mm.yyyy') -- za pass bereme pouze ty, kteri udelali 3 jizdy do 3.2.2019
group by "passengerId"
having count(1) > 2) -- vyberu si jenom pasažéry, kteří udělali alespon 3 jízdy
and "rideState" in ('FINISHED');

-----------------------------------------------------------------
--------TABULKA PASS_RATE_ETA------------------------------------
-----------------------------------------------------------------
-- průměrné hodnocení pass a průměrná eta pass-------------------
-- pouze na jízdách do 3.2.2019 včetně---------------------------

create or replace table PASS_RATE_ETA as
with x as 
(select p."passengerId",
   case when o."pasToDrvRating" is null then 5 -- pokud nehodnotí zákazník, tak předpokládáme, že je spokojeny
    else o."pasToDrvRating"
    end as "pasToDrvRating_r",
   round(avg("pasToDrvRating_r") over (partition by p."passengerId" order by p."passengerId"),2) as avg_rate_pass_to_drv,
   case when p."taxiETA" = 0 then 0.5 -- pokud eta je nula nahrazujeme 0.5
    else p."taxiETA"
    end taxi_ETA_r, --nový sloupeček pro ety s nenulovymi etami
   round(avg (taxi_ETA_r) over (partition by p."passengerId" order by p."passengerId"),2) as avg_eta ,
   row_number () over (partition by p."passengerId" order by p."passengerId") as rn
 from pass p
 left join orders o on o."orderID" = p."orderID"
 order by p."passengerId")
 
select "passengerId", avg_rate_pass_to_drv, avg_eta from x
where rn=1;

------------------------------------------------------------------
--------TABULKA PASS_NUM_ORDERS ----------------------------------
------------------------------------------------------------------
--- počet poptávek zákazníka i nerealizované----------------------
--- do 3.2.2019 včetně--------------------------------------------

create or replace table "PASS_NUM_ORDERS" as
with 
x as ( select distinct ("orderID"||"passengerId") as orders, "passengerId","orderBroadcastedAt"
        from inquiry
        where 1=1
        and "passengerId" in 
            (select distinct ("passengerId") from INQUIRY 
            where "rideState" in ('FINISHED')
            and "rideFinishedAt_UTC" <= to_date ('3.2.2019', 'dd.mm.yyyy')
            group by "passengerId"
            having count(1) > 2))
    
select "passengerId", count(1) as num_orders
from x
where "orderBroadcastedAt" <= to_date ('3.2.2019', 'dd.mm.yyyy') --berem v potaz pouze poptávky do 3.2.2019
group by "passengerId"
order by num_orders asc;

------------------------------------------------------------------
--------TABULKA PASS_NUM_RIDES -----------------------------------
------------------------------------------------------------------
--- odjetý počet jízd---------------------------------------------
create or replace table "PASS_NUM_RIDES" as
select "passengerId", count(1) as num_rides -- celkový počet odjetých jízd
from pass
group by "passengerId"
order by num_rides asc;

------------------------------------------------------------------
--------TABULKA PASS_PAYER_TYPE-----------------------------------
------------------------------------------------------------------
-- určení o jaký typ pasažéra se jedná podle druhu plateb --------

CREATE OR REPLACE TABLE "PASS_PAYER_TYPE" AS
with 
x as ( select p."passengerId",
       case when o."payerProfileType" = 'CORPORATE' 
        then 1 -- ke corporate přičítá +1 a k personal a business(zahrnujeme do personal) odečítá -1 
        else (-1)
        end as payerProfileType_n,
       sum (payerProfileType_n) over (partition by p."passengerId" order by p."passengerId") as type_p -- sečtení napočtu přes pasažera
       from pass p
       left join orders o on o."orderID" = p."orderID" -- propojení se s tabulkou orders, abychom zjistili payerProfill
       order by p."passengerId")

select distinct("passengerId"),
case when type_p >= 0  --- pokud po sečtení vyjde kladné číslo, pasažér jel víc jízd jako corporate a naopak
 then 1  ---'CORPORATE'
 else 0 ---'PERSONAL'
 end as PAYER_TYPE  -- tím si určím o jaký typ zakazníka se jedná, podle nejčastějšího typu platby
from x;

------------------------------------------------------------------
--------TABULKA PASS_REGION---------------------------------------
------------------------------------------------------------------
---- určení domácího regionu, kde nejvíce jezdí pasažér ----------
-- vyberu si jenom region s největším počtem jizd a ten určím jako HOMEREGION

create or replace table "PASS_HOME_REGION" as
with pass_reg as (
select "passengerId",
"orderRegion",
count(1) over (partition by "passengerId"||"orderRegion" order by "passengerId") as count_region -- počet jízd v jednotlivých region per passenger
from pass
order by "passengerId"),

order_pass_reg as (
select 
row_number () over (partition by "passengerId" order by count_region desc) rn, -- seřazení podle počtu jízd v regionech od nejvíce jízd po nejméně
"orderRegion",
"passengerId",
count_region
from pass_reg)

select "passengerId", "orderRegion" as "HOME_REGION" from order_pass_reg
where rn = 1;

------------------------------------------------------------------
--------ČÍSELNÍK PRO HOME_REGION ---------------------------------
------------------------------------------------------------------
create or replace table "REGION_ENUM" as
with region as 
(select distinct(home_region) from pass_home_region)

select row_number() over(order by home_region) as home_region_id,r.*
from region r;

------------------------------------------------------------------
--------TABULKA PASS_LAST_RIDES-----------------------------------
------------------------------------------------------------------
-- informace o poslední jízdě zákazníka - kdy byla, s kým, č.objednávka  - dá se doplnit eta atd 
-- bez omezení na 3.2.2019---------------------------------------

create or replace table "PASS_LAST_RIDES" as
with
pass_last as (select * from INQUIRY
where 1=1
and "passengerId" in (select distinct ("passengerId") from INQUIRY 
where "rideState" in ('FINISHED')
and "rideFinishedAt_UTC" <= to_date ('3.2.2019', 'dd.mm.yyyy')
group by "passengerId"
having count(1) > 2) -- vyberu si jenom pasažéry, kteří udělali alespon 3 jízdy bez omezení
and "rideState" in ('FINISHED')),

pass_rn as (
select 
row_number() over (partition by "passengerId" order by "rideFinishedAt_UTC" desc) as rn_last_ride, -- očíslování jízd od nejnovější po nejstarší
pass_last.*
from pass_last 
order by "passengerId")

select "passengerId", "orderID" as last_order, "driverId" as last_driver, "rideFinishedAt_UTC" as last_ride 
from pass_rn
where rn_last_ride=1;

------------------------------------------------------------------
--------TABULKA PASS_LAST_RIDES_R---------------------------------
------------------------------------------------------------------
---- POSLEDNÍ JÍZDA UPRAVENÁ/REGULOVANÁ, která byla před nebo včetně 3.2.2019

create or replace table "PASS_LAST_RIDES_R" as
with pass_rn as (
select row_number() over (partition by "passengerId" order by "rideFinishedAt_UTC" desc) as rn, -- očíslování jízd od nejnovější po nejstarší
pass.*
from pass 
where "rideFinishedAt_UTC" <= to_date ('3.2.2019', 'dd.mm.yyyy') 
order by "passengerId")

select "passengerId", "orderID" as last_order_r, "driverId" as last_driver_r, "rideFinishedAt_UTC" as last_ride_r
from pass_rn
where rn=1;

------------------------------------------------------------------
--------TABULKA PASS_FIRST_RIDES----------------------------------
------------------------------------------------------------------
-- informace o první jízdě zákazníka - kdy byla ------------------
create or replace table "PASS_FIRST_RIDES" as
with pass_rn as (
select row_number() over (partition by "passengerId" order by "rideFinishedAt_UTC" asc) as rn_first_ride, -- očíslování jízd od nejstarší po nejnovější
pass.*
from pass 
order by "passengerId")

select "passengerId","rideFinishedAt_UTC" as first_ride
from pass_rn
where rn_first_ride=1;

------------------------------------------------------------------
--------TABULKA PASS_ACT------------------------------------------
------------------------------------------------------------------
-- příznak aktivní a neaktivní zákazník---------------------------

create or replace table  PASS_ACT AS
select "passengerId",
case when last_ride >= to_date ('3.2.2019', 'dd.mm.yyyy')   -- vyhodnocení aktivní a neaktivní pass
then '1' -- ANO - aktivní zákazník 
else '0' -- NE - neaktivní zákazník, ti co udělali poslední před 3.2.2019
end as active_pass
from pass_last_rides;

------------------------------------------------------------------
----- TABULKA PASS_DATAMART ---------------------------------------
-------------------------------------------------------------------
create or replace table  PASS_DATAMART AS

select pa."passengerId",
phr.home_region, -- můžeme vynechat, máme místo toho id_home_region
re.home_region_id,
ppt.payer_type,
pnr.num_rides,
pno.num_orders,
round(pnr.num_rides/pno.num_orders,2) as ride2order,
pfr.first_ride,
plrr.last_ride_r,
datediff (day,pfr.first_ride, plrr.last_ride_r) as duration,
pre.avg_rate_pass_to_drv,
pre.avg_eta,
plrr.last_order_r,
plrr.last_driver_r,
pa.active_pass

from pass_last_rides_r plrr
left join pass_first_rides pfr on plrr."passengerId" = pfr."passengerId"
left join pass_home_region phr on plrr."passengerId" = phr."passengerId"
left join pass_num_orders pno on plrr."passengerId" = pno."passengerId"
left join pass_num_rides pnr on plrr."passengerId" = pnr."passengerId"
left join pass_payer_type ppt on plrr."passengerId" = ppt."passengerId"
left join pass_rate_eta pre on pre."passengerId" = plrr."passengerId"
left join region_enum re on re.home_region = phr.home_region
left join pass_act pa on pa."passengerId" = plrr."passengerId";

----------------------------------------------------
-----------Vytvoreni tabulky LAST_RIDES-------------
----------------------------------------------------
CREATE OR REPLACE TABLE LAST_RIDES 
as
with last_rides as
(
  with orders_p as --Pridani sloupce "passengerId" do tabulky ORDERS a vyfiltrovani pouze jizd, ktere probehly 90 dnu pred posledni "rideFinishedAt" celeho datasetu
    (select o."orderID", o."driverId", i."passengerId",i."rideFinishedAt_UTC", o."pasToDrvRating",o."drvToPasRating"
            , o."rideDistance", i."rideEstimateDistance"
            , (o."rideDistance"- i."rideEstimateDistance") as diff_distance --skutecna minus odhadovana vzdalenost (kladne hodnoty => zakaznik platil vic nez ocekaval)
            , iff(i."taxiETA"= 0, 0.5,"taxiETA") as "taxiETA"
     from ORDERS o
     left join INQUIRY i
     on o."orderID" = i."orderID" and o."driverId" = i."driverId" 
     where o."rideDistance" is not null and o."rideDistance" <> 0 and i."rideState" = 'FINISHED'
     and "rideFinishedAt_UTC" <= to_date ('3.2.2019', 'dd.mm.yyyy') -- bereme pouze jízdy do 3.2.2019
    )
  select "passengerId", "orderID"--serazeni jizd vsech zakazniku od jejich posledni do minulosti
  , row_number() over (partition by "passengerId" order by "rideFinishedAt_UTC" desc) as "rn_pass_ride"
  , sum("rideDistance") over (partition by "passengerId" order by "passengerId") as total_distance --celková vzdáleností všech jízd zákazníka
  , "rideFinishedAt_UTC","driverId", "pasToDrvRating","drvToPasRating","taxiETA","rideDistance","rideEstimateDistance"
  , ifnull(diff_distance,0) as diff_distance
  from ORDERS_P
)
select 
 "passengerId", "orderID", "driverId","pasToDrvRating"
 , ifnull ("drvToPasRating",5) as "drvToPasRating"
 , "taxiETA","rideDistance"
 , ifnull ("rideEstimateDistance",0) as "rideEstimateDistance"
 , diff_distance
 , total_distance
from last_rides
where "rn_pass_ride" = 1 --vybrana pouze 1 posledni jizda kazdeho zakaznika
and "passengerId" in --pouze zakaznici (min. 3 uskutecnene jizdy)
    (select distinct ("passengerId") from INQUIRY 
     where "rideState" in ('FINISHED')
     group by "passengerId"
     having count(1) > 2)
;

-------------------------------------------------
--------------Vytvoreni tabulky DRV--------------
--------------------------------------------------
CREATE OR REPLACE TABLE DRV as
with drv_kill as --tabulka řidičů a jejich počet mrtvol 
    (select last_driver_r, count(1) as num_kill 
     from pass_datamart
     where active_pass = '0'
     group by last_driver_r 
     order by num_kill desc
    )
, drv_nu as --tabulka počtů řidičů a jejich jízd --POZOR: zahrnuje pouze jizdy, ktere maji hodnoceni od pasazera (bez hodnoceni je 249,424 z 855,501 jizd)
    (select "driverId", count(1) as num_rides 
     from orders
     where "rideDistance" is not NULL
     --and "pasToDrvRating" is not NULL
     and "orderCreatedAt" <= to_date ('3.2.2019', 'dd.mm.yyyy') -- bereme pouze jízdy do 3.2.2019
     group by "driverId"
     order by "driverId"
    )
, drv_rides as --tabulka jizd ridicu podle poradi
    (select row_number() over (partition by "driverId" order by "orderCreatedAt" desc) as rn_ride -- poradi jizd ridice
     , orders.* 
     from orders
     where "rideDistance" is not NULL
     and "pasToDrvRating" is not NULL
     and "orderCreatedAt" <= to_date ('3.2.2019', 'dd.mm.yyyy') -- bereme pouze jízdy do 3.2.2019
     )
, drv_rides_last_100 as --tabulka omezení na poslednich 100 jizd ridicu
    (select * from drv_rides
     where rn_ride < 101
    )
, drv_rate as -- tabulka s průmerným hodnocení na posledních 100 jizdách
    (select distinct("driverId"), round (AVG ("pasToDrvRating") OVER (partition by "driverId"), 2) as AVG_RATING 
     from drv_rides_last_100
     order by "driverId"
    )
, drv_enum as -- číselník pro id řidičů, aby tam byly jenom čísla
    (select row_number() over (order by "driverId") as driver_id
     ,"driverId" from drv_rate)

select dr."driverId"
, de. driver_id
, dn.num_rides
, ifnull (dk.num_kill,0) as num_kill
, ifnull (round (dk.num_kill/dn.num_rides, 2),0) as kill_rate
, dr.avg_rating
from drv_nu dn 
left join drv_rate dr on dn."driverId"=dr."driverId"
left join drv_kill dk on dk.last_driver_r=dr."driverId"
left join drv_enum de on de."driverId" = dr."driverId"
order by kill_rate desc;

-------------------------------------------------
--------------Vytvoreni tabulky PLACHTA----------
--------------------------------------------------

alter session set week_start = 1;

CREATE or REPLACE table PLACHTA as 
select  lr."passengerId", lr."orderID"
, lr."driverId"
, d. driver_id
, ifnull (lr."pasToDrvRating", pd.avg_rate_pass_to_drv) as PASS2DRV_RATE  -- pokud není poslední jízda ohodnocena, bereme průmerné hodnocení pass
, pd.avg_rate_pass_to_drv as PASS2DRV_RATE_AVG
, PASS2DRV_RATE/PASS2DRV_RATE_AVG as PASS2DRV_RATE_DEV 
, lr."drvToPasRating" as DRV2PASS_RATE
, lr."taxiETA" as ETA, pd.avg_eta as pass_avg_eta
, ETA/pass_avg_eta as ETA_DEV
,lr."rideDistance", "rideEstimateDistance"
, lr.diff_distance
, (case 
   when lr."rideEstimateDistance" < 500 then 0
   when lr."rideEstimateDistance" > 500 and lr.diff_distance <= 1 then 0--predpokladame, ze pokud zaplati zakaznik stejne nebo min, tak kvuli tomu neodejde
   else round(lr.diff_distance/ lr."rideEstimateDistance")+1
   end) as DIFF_DISTANCE_RATE -- 0: pokud EstimateDistance < 500, 1: pokud odhadovana a skutecna vzdalenost byla 1:1, dale nasobky
,(case 
   when lr."rideEstimateDistance" < 500 then 1
   when lr."rideEstimateDistance" >= 500 then round(lr."rideEstimateDistance"/lr."rideDistance", 2)
   end) as DIFF_DISTANCE_EST2REAL--Podil odahdovane vzdalenosti ke skutecne; pokud odhad nebyl, tak 1
, (case 
   when lr."rideEstimateDistance" < 500 then 2 
   when lr.diff_distance < 0 then 0
   when lr.diff_distance >= 0 then 1
   end) as DIFF_DISTANCE_POSITIVE
, lr.total_distance
, pd.duration as pass_lifetime
/*, (case
   when pd.duration = 0 then lr.total_distance
   else round (lr.total_distance/pass_lifetime)
   end) as AVG_DAILY_DISTANCE -- prumerna denni vzdalenost pasazera (pozor, je zkreslena, pokud nejezdi casto)*/
, round(lr.total_distance/pd.num_rides) as AVG_RIDE_DISTANCE -- prumerna vzdalenost jedne jizdy pasazera (OK, nezkresluje, jako AVG_DAILY_DISTANCE)
, round(lr."rideDistance"/ AVG_RIDE_DISTANCE, 2) as LAST_RIDE_DISTANCE_DEV --podil vzdalenosti posledni jizdy pasazera ke vzdalenosti jeho prumerne jizdy
, pd.num_rides as pass_num_rides --,pd.num_orders as pass_num_orders
, pd."RIDE2ORDER" as pass_ride2order
, case when pd.duration = 0 then pd.num_rides
  else round (pd.num_rides / pd.duration,2)
  end as frequency
--, pd.last_ride_r as pass_last_ride
, case when to_time(pd.last_ride_r) between to_time ('06:00:00', 'HH24.MI.SS') and to_time ('22:00:00', 'HH24.MI.SS') then 1 -- daily 
  else 0 -- nightly
  end as daily_last_ride
, dayofweek(pd.last_ride_r) as DAY_OF_LAST_RIDE
, pd.active_pass, pd.home_region_id
, d.avg_rating as DRV_AVG_RATING
, DRV2PASS_RATE/DRV_AVG_RATING as DRV_AVG_RATE_DEV
, d.num_rides as drv_num_rides, d.kill_rate as drv_kill_rate
from last_rides lr
left join pass_datamart pd on pd."passengerId"=lr."passengerId"
left join drv d on d."driverId"= lr."driverId"
where pd.payer_type = '0'
and "rideDistance" >= 500;
